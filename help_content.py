help_instructions = {
    "Merge Sort": "Input: List of numbers (e.g., '3 1 4 1 5')\nOutput: Sorted list.",
    "Quick Sort": "Input: List of numbers (e.g., '3 1 4 1 5')\nOutput: Sorted list.",
    "Binary Search": "Input: Sorted list and target number (e.g., '1 3 4 5, 4')\nOutput: Index of target number or -1 if not found.",
    "Fibonacci Sequence": "Input: n (integer)\nExample: 5\nOutput: Fibonacci number at position n.",
    "Knapsack Problem": "Input: weights and values as pairs (e.g., '2,3 3,4')\nExample: '2,3 3,4'\nOutput: Maximum value that can be carried.",
    "Longest Common Subsequence": "Input: Two strings (e.g., 'ABC, AC')\nOutput: Length of the longest common subsequence.",
    "Matrix Chain Multiplication": "Input: List of matrix dimensions (e.g., '10, 20, 30, 40')\nOutput: Minimum number of multiplications needed.",
    "Coin Change Problem": "Input: List of coin denominations and target amount (e.g., '1, 2, 5, 11, 15, 11')\nOutput: Minimum number of coins needed to make the amount.",
    "Prim's Algorithm": "Input: Graph represented as an adjacency list or matrix.\nOutput: Edges in the Minimum Spanning Tree.",
    "Kruskal's Algorithm": "Input: Graph represented as a list of edges with weights.\nOutput: Edges in the Minimum Spanning Tree.",
    "Dijkstra's Algorithm": "Input: Graph represented as an adjacency list or matrix and starting vertex.\nOutput: Shortest path distances from the start vertex to all other vertices.",
    "Huffman Coding": "Input: Frequencies of characters (e.g., {'A': 5, 'B': 9, 'C': 12})\nOutput: Binary codes for each character.",
    "N-Queens Problem": "Input: n (integer)\nExample: 4\nOutput: All possible arrangements of n queens on an n x n chessboard.",
    "Sudoku Solver": "Input: 9x9 Sudoku board with 0s for empty cells.\nOutput: Solved Sudoku board.",
    "Depth-First Search": "Input: Graph represented as an adjacency list or matrix and starting vertex.\nOutput: Order of vertices visited.",
    "Breadth-First Search": "Input: Graph represented as an adjacency list or matrix and starting vertex.\nOutput: Order of vertices visited.",
    "Traveling Salesman Problem": "Input: Distance matrix representing the graph.\nOutput: Minimum cost of visiting all cities and returning to the start.",
    "Randomized Quick Sort": "Input: List of numbers (e.g., '3 1 4 1 5')\nOutput: Sorted list.",
    "Random Sampling": "Input: List of items and sample size (e.g., '1, 2, 3, 4, 5, 3')\nOutput: Randomly selected sample of specified size.",
    "Knuth-Morris-Pratt": "Input: Pattern and text (e.g., 'abc, abcpqrabc')\nOutput: Starting indices of pattern occurrences in the text.",
    "Rabin-Karp": "Input: Pattern and text (e.g., 'abc, abcpqrabc')\nOutput: Starting indices of pattern occurrences in the text.",
    "Longest Common Substring": "Input: Two strings (e.g., 'ABC, AC')\nOutput: Length of the longest common substring.",
    "Suffix Trees": "Input: String (e.g., 'banana')\nOutput: Suffix tree representation of the string.",
    "Boyer-Moore Algorithm": "Input: Pattern and text (e.g., 'abc, abcpqrabc')\nOutput: Starting indices of pattern occurrences in the text.",
}